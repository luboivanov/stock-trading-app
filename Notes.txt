Backend
	c:\Projects\FullStackStockApp\backend
	npm run start:dev
	http://localhost:8000/api/v1/best-trade?start=2025-07-01T10:00:00Z&end=2025-07-01T10:00:12Z&funds=1000
	Swagger: http://localhost:8000/api#/App/AppController_getBestTrade
	API-JSON doc: http://localhost:8000/api-json
	Health: http://localhost:8000/health

Frontend
	c:\Projects\FullStackStockApp\frontend
	npm run build
	npm start:prod
	http://localhost:3001/

Python CSV generation
	python generate_price_data.py --rows 100 --start 2025-07-01T12:00:00Z

Github
	https://github.com/luboivanov/stock-trading-app
	push to the above :) 

Cypress
	http://localhost:3001/__/#/specs/runner?file=cypress/e2e/app.cy.js

Render.com
	Backend: 
		https://stock-backend-gvvp.onrender.com/
		https://stock-backend-gvvp.onrender.com/api/v1/best-trade?start=2025-07-01T10:00:00Z&end=2025-07-01T10:00:11Z
	Backend health:
		https://stock-backend-gvvp.onrender.com/api/health
	Swagger:
		https://stock-backend-gvvp.onrender.com/api#/App/AppController_getBestTrade
	API-JSON:
		https://stock-backend-gvvp.onrender.com/api-json
	Prometheus metrics:
		https://stock-backend-gvvp.onrender.com/api/metrics
	Frontend:
		https://stock-frontend-txmg.onrender.com/

	

Testing:
	no buy/sell, flat prices - 2025-07-01T10:00:20Z to 2025-07-01T10:00:25Z
	no buy/sell, descending prices - 2025-07-01T10:00:26Z to 2025-07-01T10:00:29Z
	typical scenario - 00 to 38, buy at 01, sell at 04
	equal profit, earrlier deal - 2025-07-01T10:00:01Z to 2025-07-01T10:00:11Z -> to return 01 to 04
	???equal profit, same sell date, shorter duration (later buy date) 2025-07-01T10:00:30Z to 2025-07-01T10:00:34Z
	
	Flat prices:
		2025-07-01 10:00:19 UTC
		2025-07-01 10:00:25 UTC

	Descending prices:
		2025-07-01 10:00:18 UTC
		2025-07-01 10:00:19 UTC

	Same profit, Earliest sell (shorter duration):
		2025-07-01 10:00:37 UTC
		2025-07-01 10:00:39 UTC
		should return buy at :38 (prices at :38 and :39 are the same)

	Mixed scenario (earliest sell, then decreasing prices)
		2025-07-01 10:00:25 UTC
		2025-07-01 10:00:29 UTC
		should return buy at :25 and sell at :26

	Mixed scenario (low price, then random prices, but not lower than at :25, then earliest sell at :38, not at :39(same price as :38, but storter))
		2025-07-01 10:00:25 UTC
		2025-07-01 10:00:39 UTC
		should return buy at :25 and sell at :38


Huge Test Data Set:
	2025-07-01T00:00:00Z to 2025-07-01T23:59:59Z -> random, between 0.01 and 100
	2025-07-02T00:00:00Z to 2025-07-04T23:59:59Z -> descending, starting from 3000


test the UI:
	2025-07-01 10:00:00 UTC
	http://localhost:3001/

run BE unit tests:
	cd c:\Projects\FullStackStockApp\backend>
	npm run test -- --coverage
	BE unit test wjest 

run FE unit tests:
	go to c:\Projects\FullStackStockApp\frontend>
	npm test -- --coverage

run Cypress E2E tests:
	go to c:\Projects\FullStackStockApp\frontend>
	npx cypress open - opens the UI
	npx cypress run - to run in the console
	http://localhost:57285/__/#/specs

run Linter:
	c:\Projects\FullStackStockApp\backend>npm run lint
	c:\Projects\FullStackStockApp\frontend>npx eslint . --ext .js,.jsx,.ts,.tsx

run Prettier:
	go to either frontend and backend folders and run npm run format

ToDo:
//fraction shares


Production ready DONE:
	Functionally ready with 2 bonus features (fractional shares and date/time selector with seconds for precise trade time selection)
	Unit tests
		Frontend - 97% coverage
		Backend - 93% coverage
	E2E testing
		Cypress, 5 tests
	Version control - Git locally + GitHub
	Dev environment on localhost
	Production in the cloud - hosted at Render.com 
	Automatically deployed in a container (managed by Render, Docker-like)
	Ready for horizontal scaling (Render Dashboard → Service → Scaling → Manual Scaling)
		Manual scaling up to 3 instances (requires non-free pack)
		Auto scaling (requires expensive Pro pack)
	Automatic Reverse Proxy and CDN by Render
		Render uses Content Delivery Network (CDN) - automatically distributes static files (HTML, CSS, JS, images, etc.) across data centers worldwide.
		Render's CDN acts as Reverse Proxy 
			Accepts the incoming HTTPS requests
			Serves from cache whenever possible (css, images, etc)
			Forwards the request to the Render server
	CI/CD - GitHub Actions:
		automatically builds and triggers backend and frontend unit tests and Cypress E2E
		email notifications on failed tests
		automated deployment for frontend and backend 
	Backend healthCheck
		at /api/health with TerminusModule 
		Render.com checks app health after every deployment 
		Restarts the backend if it becomes unresponsive
	Swagger for API docs, available at /api#/App/AppController_getBestTrade
	HTTPS for all endpoints in the cloud - backend, frontend, swagger, health checks
	Environment variables (REACT_APP_API_URL)
	CORS (Cross-Origin Resource Sharing) enabled since the frontend (React app) and backend (NestJS) apps run on different ports and domains
	Linter (ESLint) for code quality & correctness
		Covers both front-end and back-end and even E2E Cypress tests
		Added as part of the CI workflow in GitHub Actions
	Prettier
		Covers front-end and back-end
		Added as part of the CI workflow in GitHub Actions
	Winston
		Records events, errors, warnings, and info messages of the backend code
		Useful for debugging, auditing, and tracking what happened in the app
		https://dashboard.render.com/web/srv-d1lr0k7diees7381g510/logs
	Prometheus installed
		exposes /metrics endpoint for collecting metrics performance and health, failed to visualise in Grafana (requires service worker)
		https://stock-backend-gvvp.onrender.com/api/metrics
	Rate limiting by Throttler
		30reqs/min/IP
		configured to trust the X-Forwarded-For header, so that we limit per real user (in case they use the UI or when behind the CDN)
	Accessibility basic coverage for users with motor disabilities (use the UI with keyboard only). 
	Documentation
		Architecture diagram (Miro)
		Deployment diagram (Miro)
		Readme.md in GitHub
		Requirements



Production ready TODO:
	Security & Observability — 
		rate limiting (e.g., @nestjs/throttler) to prevent abuse., 
		Monitoring - Monitor uptime, integrate with tools like Prometheus, Grafana
	Slidedeck??
	Grafana??
	


Prod Ready Low prio and Not needed
	Secrets Management (GitHub) - not applicable for the project
	Load Balancer - not needed atm, could be done once scaling to multiple instances or when custom routing logic is needed(e.g., multiple services behind one domain)
	Reverse proxy (nginx or other) - not needed atm, Render is automatically doing Reverse proxying from the public URL to the internal service.
	API mocks (Stubs) - not urgent as frontend is integrated and running against the actual backend in CI and local dev and already testing the full stack (unit + E2E) with real APIs
	CSRF (Cross-Site Request Forgery) - not needed as the API is stateless and does not use cookies for authentication
	Session fixation filter (to prevent from cases when attacker sets or predicts a user's session ID before they log in) - not needed as no sessions are implemented
	Serve both backend and frontend under one domain.
	Full Accessibility - including users with visual impairment 
	Localization and Internationalization
	Infrastructure as Code (IaC)
	Automatically create git tags/releases on successful merges.
	Canary or blue/green deployments
	Deployment Monitoring - Use tools like Grafana, Prometheus, or LogRocket/Sentry for observability.
		Failed adding it, requires service worker in Render, which is paid subscription. Revisit as optional.



Deployment Flow
Code Push (main)
      ↓
GitHub Actions
  ├─ Run Unit Tests
  ├─ Run Cypress E2E
  └─ ✅ All Pass → Push to main
      ↓
Render Auto-deploy Triggered
  ├─ Backend Rebuild & Restart
  └─ Frontend Rebuild & CDN Upload

Visual Representation of Reverse Proxy and CDN
Client (Browser)
      ↓
[Render CDN / Reverse Proxy]
      ↓
Frontend static files (React build output)